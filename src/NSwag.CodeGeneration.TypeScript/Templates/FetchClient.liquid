{% if HasOperations -%}
{% for operation in Operations %}

    {% template Client.Method.Documentation %}
{% if operation.IsPost == true or operation.IsPut == true %}
   export async function {{ operation.MethodAccessModifier }}{{ Class }}{{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: Models.{{ parameter.Type }}{{ parameter.TypePostfix }}{% if parameter.IsLast == false %}, {% endif %}{% endfor %}{% if UseAbortSignal %}{% if operation.Parameters.size > 0 %}, {% endif %}signal?: AbortSignal | undefined{% endif %}): Promise<any> {
{%- else -%}
export async function {{ operation.MethodAccessModifier }}{{ Class }}{{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{{ parameter.TypePostfix }}{% if parameter.IsLast == false %}, {% endif %}{% endfor %}{% if UseAbortSignal %}{% if operation.Parameters.size > 0 %}, {% endif %}signal?: AbortSignal | undefined{% endif %}): Promise<any> {
   {%-    endif -%}

        {% template Client.RequestUrl %}

{%-    if operation.HasBody -%}
        {% template Client.RequestBody %}

{%-    endif -%}
{%     if operation.IsGet != true -%}

        let options_: RequestInit = {
{%-    if operation.HasBody -%}
            body: content_,
{%-    endif -%}
            method: "{{ operation.HttpMethodUpper | upcase }}",
{%-    if UseAbortSignal -%}
            signal,
{%-    endif -%}
{%-    if operation.IsPut == true -%}
            headers: await getHeaders("{{ operation.HttpMethodUpper | upcase }}", String(baseUrl)),
{%-    if operation.IsCacheEnabled == true -%}
 next: { revalidate: 60 }
{%- else -%}
next: { revalidate: 0 }
{%- endif -%}
{%- endif -%}
{%-    if operation.IsPut != true -%}
            cache: "no-store",
            headers: await getHeaders("{{ operation.HttpMethodUpper | upcase }}", String(baseUrl)),
{%- endif -%}
        };
  {%-    endif -%}      

{%-    if UseTransformOptionsMethod -%}
        return this.transformOptions(options_).then(transformedOptions_ => {
            return fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
{%-    else -%}
        return fetch(url_, options_).then((_response: Response) => {
{%-    endif -%}
{%-    if UseTransformResultMethod -%}
            return this.transformResult(url_, _response, (_response: Response) => this.process{{ operation.ActualOperationNameUpper }}(_response));
{%-    else -%}
            return process{{ operation.ActualOperationNameUpper }}(_response);
{%-    endif -%}
        });
    }

    function process{{ operation.ActualOperationNameUpper }}(response: Response): Promise<any> {
        const status = response.status;
        {% template Client.ProcessResponse %}
    }
{% endfor -%}
{%- endif -%}
